# Summary:
# Creates a new deployment on Zeit's platform, when anything is pushed in any branch (except for the "master" branch).
# Read ./README.md for extensive documentation

name: Deploy to Zeit (staging)

on:
  # There are several ways to trigger Github actions - See https://help.github.com/en/actions/reference/events-that-trigger-workflows#example-using-a-single-event for a comprehensive list:
  # - "push": Triggers each time a commit is pushed
  # - "pull_request": Triggers each time a commit is pushed within a pull request, it makes it much easier to write comments within the PR, but it suffers some strong limitations:
  #   - There is no way to trigger when a PR is merged into another - See https://github.community/t/pull-request-action-does-not-run-on-merge/16092?u=vadorequest
  #   - It won't trigger when the PR is conflicting with its base branch - See https://github.community/t/run-actions-on-pull-requests-with-merge-conflicts/17104/2?u=vadorequest
  push: # Triggers on each pushed commit
    branches-ignore:
      - 'master'

  # Allow manual trigger via a button in github or a HTTP call - See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#manually-running-a-workflow
  # XXX Read more about how to use it with NRN in .github/WORKFLOW_DISPATCH.md
  workflow_dispatch:
    inputs:
      customer:
        description: 'Customer to deploy'
        required: true

jobs:
  # Configures the deployment environment, install dependencies (like node, npm, etc.) that are requirements for the upcoming jobs
  # Ex: Necessary to run `yarn deploy`
  setup-environment:
    name: Setup deployment environment (Ubuntu 18.04 - Node 12.x)
    runs-on: ubuntu-18.04
    steps:
      - name: Installing node.js
        uses: actions/setup-node@v1 # Used to install node environment - XXX https://github.com/actions/setup-node
        with:
          node-version: '12.x' # Use the same node.js version as the one Zeit's uses (currently node12.x)

  # Starts a Zeit deployment, using the staging configuration file of the default institution
  # The default institution is the one defined in the `now.json` file (which is a symlink to the actual file)
  # N.B: It's Zeit that will perform the actual deployment
  start-staging-deployment:
    name: Starts Zeit deployment (staging) (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: setup-environment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Deploying on Zeit (staging)
        # Workflow overview:
        #   - Resolve customer to deploy from github event input (falls back to resolving it from now.json file)
        #   - Resolve $ZEIT_DEPLOYMENT_URL
        #   - Get stdout from deploy command (stderr prints build steps and stdout prints deployment url, which is what we are really looking for)
        #   - Set the deployment url that will be included in the eventual PR comment
        #   - Create a deployment alias based on the branch name, and link it to the deployment (so that each branch has its own domain automatically aliased to the latest commit)
        run: |
          # Print the version of the "now" CLI being used (helps debugging)
          now --version

          # Resolving customer to deploy based on the github event input, when using manual deployment triggerer through "workflow_dispatch" event
          # Falls back to the customer specified in the now.json file, which is most useful when deployment is triggered through "push" event
          MANUAL_TRIGGER_CUSTOMER="${{ github.event.inputs.customer}}"
          echo "MANUAL_TRIGGER_CUSTOMER: " $MANUAL_TRIGGER_CUSTOMER
          echo "MANUAL_TRIGGER_CUSTOMER=$MANUAL_TRIGGER_CUSTOMER" >> $GITHUB_ENV

          CUSTOMER_TO_DEPLOY="${MANUAL_TRIGGER_CUSTOMER:-$(cat now.json | jq -r '.build.env.NEXT_PUBLIC_CUSTOMER_REF')}"
          echo "Customer to deploy: " $CUSTOMER_TO_DEPLOY
          echo "CUSTOMER_TO_DEPLOY=$CUSTOMER_TO_DEPLOY" >> $GITHUB_ENV

          # Deploy the customer on Vercel using the customer specified in now.json (e.g: "yarn deploy:customer1")
          # Store the output in a variable so we can extract metadata from it
          ZEIT_DEPLOYMENT_OUTPUT=`yarn deploy:$CUSTOMER_TO_DEPLOY --token $ZEIT_TOKEN`

          # Extract the Vercel deployment url from the deployment output
          ZEIT_DEPLOYMENT_URL=`echo $ZEIT_DEPLOYMENT_OUTPUT | egrep -o 'https?://[^ ]+.vercel.app'`
          echo "Deployment url: " $ZEIT_DEPLOYMENT_URL
          echo "ZEIT_DEPLOYMENT_URL=$ZEIT_DEPLOYMENT_URL" >> $GITHUB_ENV

          # Build the alias domain based on our own rules (NRN own rules)
          # Basically, if a branch starts with "v[0-9]" then we consider it to be a "preset branch" and we use the branch name as alias (e.g: "v2-mst-xxx")
          # Otherwise, we use the deployment name and suffix it using the branch name (e.g: "v2-mst-xxx-branch-name")
          if [[ ${CURRENT_BRANCH##*/} =~ ^v[0-9]{1,}- ]]; then # Checking if pattern matches with "vX-" where X is a number
            ZEIT_DEPLOYMENT_ALIAS=${CURRENT_BRANCH##*/}
          else
            ZEIT_DEPLOYMENT_ALIAS=$(cat now.$CUSTOMER_TO_DEPLOY.staging.json | jq -r '.name')-${CURRENT_BRANCH##*/}
          fi
          echo "Resolved domain alias: " $ZEIT_DEPLOYMENT_ALIAS

          # Zeit alias only allows 41 characters in the domain name, so we only keep the first 41 (41 = 53 - 11 - 1) characters (because Zeit needs 7 chars for ".vercel.app" at the end of the domain name, and count starts at 1, not 0)
          # Also, in order to remove forbidden characters, we transform every characters which are not a "alnum" and \n or \r into '-'
          ZEIT_DEPLOYMENT_ALIAS=$(echo $ZEIT_DEPLOYMENT_ALIAS | head -c 41 | tr -c '[:alnum:]\r\n' - | tr '[:upper:]' '[:lower:]')
          echo "Sanitized domain alias (1): " $ZEIT_DEPLOYMENT_ALIAS

          # Recursively remove any trailing dash ('-') to protect against invalid alias domain (not allowed to end with a trailing slash)
          while [[ "$ZEIT_DEPLOYMENT_ALIAS" == *- ]]
          do
            ZEIT_DEPLOYMENT_ALIAS=${ZEIT_DEPLOYMENT_ALIAS::-1}
          done
          echo "Sanitized domain alias (2): " $ZEIT_DEPLOYMENT_ALIAS

          # Build alias url
          ZEIT_DEPLOYMENT_ALIAS="${ZEIT_DEPLOYMENT_ALIAS}.vercel.app"
          echo "ZEIT_DEPLOYMENT_ALIAS=$ZEIT_DEPLOYMENT_ALIAS" >> $GITHUB_ENV
          echo "Alias domain: "$ZEIT_DEPLOYMENT_ALIAS
          echo "Aliasing the deployment using the git branch alias:"
          echo "npx now alias "$ZEIT_DEPLOYMENT_URL $ZEIT_DEPLOYMENT_ALIAS

          # Create Vercel alias, use "||" to allow failure (keep the build going) even if the alias fails
          ZEIT_ALIASING_OUTPUT=`npx now alias $ZEIT_DEPLOYMENT_URL $ZEIT_DEPLOYMENT_ALIAS --token $ZEIT_TOKEN || echo "Aliasing failed, but the build will continue regardless."`
          echo $ZEIT_ALIASING_OUTPUT
          # TODO Resolve whether the aliasing has worked and change the GitHub comment "Comment PR (Deployment success)"
        env:
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }} # Passing github's secret to the worker
          CURRENT_BRANCH: ${{ github.ref }} # Passing current branch to the worker

      # We need to find the PR id. Will be used later to comment on that PR.
      - name: Finding Pull Request ID
        uses: jwalton/gh-find-current-pr@v1
        id: pr_id_finder
        if: always() # It forces the job to be always executed, even if a previous job fail.
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # On deployment failure, add a comment to the PR
      - name: Comment PR (Deployment failure)
        uses: peter-evans/create-or-update-comment@v1
        if: failure()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :x:&nbsp; Deployment **FAILED**
            Commit ${{ github.sha }} failed to deploy to [${{ env.ZEIT_DEPLOYMENT_URL }}](${{ env.ZEIT_DEPLOYMENT_URL }})
            [click to see logs](https://github.com/UnlyEd/next-right-now/pull/${{ steps.pr_id_finder.outputs.number }}/checks)

      # On deployment success, add a comment to the PR
      - name: Comment PR (Deployment success)
        uses: peter-evans/create-or-update-comment@v1
        if: success()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :white_check_mark:&nbsp; Deployment **SUCCESS**
            Commit ${{ github.sha }} successfully deployed to [${{ env.ZEIT_DEPLOYMENT_URL }}](${{ env.ZEIT_DEPLOYMENT_URL }})
            Deployment aliased as [${{ env.ZEIT_DEPLOYMENT_ALIAS }}](https://${{ env.ZEIT_DEPLOYMENT_ALIAS }})

  # Runs E2E tests against the Zeit deployment
  run-2e2-tests:
    name: Run end to end (E2E) tests (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    # Docker image with Cypress pre-installed
    # https://github.com/cypress-io/cypress-docker-images/tree/master/included
    container: cypress/included:3.8.3
    needs: start-staging-deployment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Resolving deployment url from Zeit
        # Workflow overview:
        #   - Resolve customer to deploy from github event input (falls back to resolving it from now.json file)
        #   - Resolve $ZEIT_DEPLOYMENT_URL
        #     - Fetch all deployments data (by using the scope in `now.json`)
        #     - Resolve the last url (from `response.deployments[0].url`)
        #     - Remove the `"` character to pre-format url
        # We need to set env the url for next step, formatted as `https://${$ZEIT_DEPLOYMENT}`
        run: |
          apt update -y >/dev/null && apt install -y jq >/dev/null

          MANUAL_TRIGGER_CUSTOMER="${{ github.event.inputs.customer}}"
          echo "MANUAL_TRIGGER_CUSTOMER: " $MANUAL_TRIGGER_CUSTOMER
          echo "MANUAL_TRIGGER_CUSTOMER=$MANUAL_TRIGGER_CUSTOMER" >> $GITHUB_ENV

          CUSTOMER_TO_DEPLOY="${MANUAL_TRIGGER_CUSTOMER:-$(cat now.json | jq -r '.build.env.NEXT_PUBLIC_CUSTOMER_REF')}"
          echo "Customer that was deployed: " $CUSTOMER_TO_DEPLOY
          echo "CUSTOMER_TO_DEPLOY=$CUSTOMER_TO_DEPLOY" >> $GITHUB_ENV

          # Resolve Vercel team ID
          VERCEL_TEAM_ID=`cat now.$CUSTOMER_TO_DEPLOY.staging.json | jq -r '.scope'`
          echo "Vercel team ID: " $VERCEL_TEAM_ID
          echo "VERCEL_TEAM_ID=$VERCEL_TEAM_ID" >> $GITHUB_ENV

          # Resolve Vercel project name
          VERCEL_PROJECT_NAME=`cat now.$CUSTOMER_TO_DEPLOY.staging.json | jq -r '.name'`
          echo "Vercel project name: " $VERCEL_PROJECT_NAME
          echo "VERCEL_PROJECT_NAME=$VERCEL_PROJECT_NAME" >> $GITHUB_ENV

          # Build Vercel API endpoint used to fetch deployments
          VERCEL_FETCH_DEPLOYMENTS_API_ENDPOINT="https://api.zeit.co/v5/now/deployments?teamId=$VERCEL_TEAM_ID"
          echo "Fetching Vercel deployments using API endpoint: " $VERCEL_FETCH_DEPLOYMENTS_API_ENDPOINT

          # Fetch all zeit deployment from this project
          ALL_ZEIT_DEPLOYMENTS=`curl -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.ZEIT_TOKEN }}' $VERCEL_FETCH_DEPLOYMENTS_API_ENDPOINT`
          echo "Vercel deployments for current team: " $ALL_ZEIT_DEPLOYMENTS

          # Parse the deployments (as json) to find the latest deployment url, while stripping the double quotes
          # TODO Do not use '.deployments [0].url' blindly, but filter the deployments array first to make sure to consider only the deployments where "name" is equal to $VERCEL_PROJECT_NAME
          ZEIT_DEPLOYMENT=`echo $ALL_ZEIT_DEPLOYMENTS | jq '.deployments [0].url' | tr -d \"`
          ZEIT_DEPLOYMENT_URL="https://$ZEIT_DEPLOYMENT"
          echo "Url where to run E2E tests (ZEIT_DEPLOYMENT_URL): " $ZEIT_DEPLOYMENT_URL
          echo "ZEIT_DEPLOYMENT_URL=$ZEIT_DEPLOYMENT_URL" >> $GITHUB_ENV

      # Run the E2E tests against the new Zeit deployment
      - name: Run E2E tests (Cypress)
        uses: cypress-io/github-action@v1 # XXX See https://github.com/cypress-io/github-action
        with:
          wait-on: ${{ env.ZEIT_DEPLOYMENT_URL }} # Be sure that the endpoint is ready by pinging it before starting tests, it has a timeout of 60seconds
          config-file: cypress/config-${{ env.CUSTOMER_TO_DEPLOY }}.json # The config file itself doesn't matter because we will override most settings anyway. We just need `projectId` to run the tests.
          config: baseUrl=${{ env.ZEIT_DEPLOYMENT_URL }} # Overriding baseUrl provided by config file to test the new deployment

      # On E2E failure, upload screenshots
      - name: Uplad screenshots artifacts (E2E failure)
        uses: actions/upload-artifact@v1 # On failure we upload artifacts, https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts
        if: failure()
        with:
          name: screenshots
          path: cypress/screenshots/

      # On E2E failure, upload videos
      - name: Uplad videos artifacts (E2E failure)
        uses: actions/upload-artifact@v1 # On failure we upload artifacts, https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts
        if: failure()
        with:
          name: videos
          path: cypress/videos/

      # We need to find the PR id. Will be used later to comment on that PR.
      - name: Finding Pull Request ID
        uses: jwalton/gh-find-current-pr@v1
        id: pr_id_finder
        if: always() # It forces the job to be always executed, even if a previous job fail.
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # On E2E failure, add a comment to the PR with additional information
      - name: Comment PR (E2E failure)
        uses: peter-evans/create-or-update-comment@v1
        if: failure()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :x:&nbsp; E2E tests **FAILED** for commit ${{ github.sha }} previously deployed at [${{ env.ZEIT_DEPLOYMENT_URL }}](${{ env.ZEIT_DEPLOYMENT_URL }})
            Download artifacts (screenshots + videos) from [`checks`](https://github.com/UnlyEd/next-right-now/pull/${{ steps.pr_id_finder.outputs.number }}/checks) section

      # On E2E success, add a comment to the PR
      - name: Comment PR (E2E success)
        uses: peter-evans/create-or-update-comment@v1
        if: success()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :white_check_mark:&nbsp; E2E tests **SUCCESS** for commit ${{ github.sha }} previously deployed at [${{ env.ZEIT_DEPLOYMENT_URL }}](${{ env.ZEIT_DEPLOYMENT_URL }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Run Lighthouse reports in parallel of E2E tests
  run-lighthouse-tests:
    name: Run LightHouse checks (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: start-staging-deployment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Resolving deployment url from Zeit
        # Workflow overview:
        #   - Resolve customer to deploy from github event input (falls back to resolving it from now.json file)
        #   - Resolve $ZEIT_DEPLOYMENT_URL
        #     - Fetch all deployments data (by using the scope in `now.json`)
        #     - Resolve the last url (from `response.deployments[0].url`)
        #     - Remove the `"` character to pre-format url
        # We need to set env the url for next step, formatted as `https://${$ZEIT_DEPLOYMENT}/en` using /en endpoint to improve perfs by avoiding the url redirect on /
        run: |
          apt update -y >/dev/null && apt install -y jq >/dev/null

          MANUAL_TRIGGER_CUSTOMER="${{ github.event.inputs.customer}}"
          echo "MANUAL_TRIGGER_CUSTOMER: " $MANUAL_TRIGGER_CUSTOMER
          echo "MANUAL_TRIGGER_CUSTOMER=$MANUAL_TRIGGER_CUSTOMER" >> $GITHUB_ENV

          CUSTOMER_TO_DEPLOY="${MANUAL_TRIGGER_CUSTOMER:-$(cat now.json | jq -r '.build.env.NEXT_PUBLIC_CUSTOMER_REF')}"
          echo "Customer that was deployed: " $CUSTOMER_TO_DEPLOY
          echo "CUSTOMER_TO_DEPLOY=$CUSTOMER_TO_DEPLOY" >> $GITHUB_ENV

          # Resolve Vercel team ID
          VERCEL_TEAM_ID=`cat now.$CUSTOMER_TO_DEPLOY.staging.json | jq -r '.scope'`
          echo "Vercel team ID: " $VERCEL_TEAM_ID
          echo "VERCEL_TEAM_ID=$VERCEL_TEAM_ID" >> $GITHUB_ENV

          # Resolve Vercel project name
          VERCEL_PROJECT_NAME=`cat now.$CUSTOMER_TO_DEPLOY.staging.json | jq -r '.name'`
          echo "Vercel project name: " $VERCEL_PROJECT_NAME
          echo "VERCEL_PROJECT_NAME=$VERCEL_PROJECT_NAME" >> $GITHUB_ENV

          # Build Vercel API endpoint used to fetch deployments
          VERCEL_FETCH_DEPLOYMENTS_API_ENDPOINT="https://api.zeit.co/v5/now/deployments?teamId=$VERCEL_TEAM_ID"
          echo "Fetching Vercel deployments using API endpoint: " $VERCEL_FETCH_DEPLOYMENTS_API_ENDPOINT

          # Fetch all zeit deployment from this project
          ALL_ZEIT_DEPLOYMENTS=`curl -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.ZEIT_TOKEN }}' $VERCEL_FETCH_DEPLOYMENTS_API_ENDPOINT`
          echo "Vercel deployments for current team: " $ALL_ZEIT_DEPLOYMENTS

          # Parse the deployments (as json) to find the latest deployment url, while stripping the double quotes
          # TODO Do not use '.deployments [0].url' blindly, but filter the deployments array first to make sure to consider only the deployments where "name" is equal to $VERCEL_PROJECT_NAME
          ZEIT_DEPLOYMENT=`echo $ALL_ZEIT_DEPLOYMENTS | jq '.deployments [0].url' | tr -d \"`
          ZEIT_DEPLOYMENT_URL="https://$ZEIT_DEPLOYMENT"
          echo "Url where to run LightHouse tests (ZEIT_DEPLOYMENT_URL): " $ZEIT_DEPLOYMENT_URL
          echo "ZEIT_DEPLOYMENT_URL=$ZEIT_DEPLOYMENT_URL" >> $GITHUB_ENV
        env:
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }} # Passing github's secret to the worker
      # In order to store reports and then upload it, we need to create the folder before any tests
      - name: Create temporary folder for artifacts storage
        run: mkdir /tmp/lighthouse-artifacts

      # It runs the lighthouse report for a provided url and create a HTML report in the specified directory
      # Action documentation: https://github.com/marketplace/actions/lighthouse-check#usage-standard-example
      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@v2.0.5
        id: lighthouseCheck
        with: # See https://github.com/marketplace/actions/lighthouse-check#inputs for all options
          accessToken: ${{ secrets.GITHUB_TOKEN }} # Providing a token to comment the PR if you are using a "pull_request" as trigger, or using "commentUrl" option.
          commentUrl: https://api.github.com/repos/UnlyEd/next-right-now/commits/${{ github.sha }}/comments
          prCommentEnabled: true # Whether to comment on the PR (default: true). Disabled because we use our own "Comment PR (LightHouse report)" action
          prCommentSaveOld: true # If true, then add a new comment for each commit. Otherwise, update the latest comment (default: false).
          outputDirectory: /tmp/lighthouse-artifacts # Used to upload artifacts.
          emulatedFormFactor: all # Run LightHouse against "mobile", "desktop", or "all" devices
          urls: ${{ env.ZEIT_DEPLOYMENT_URL }}, ${{ env.ZEIT_DEPLOYMENT_URL }}/en, ${{ env.ZEIT_DEPLOYMENT_URL }}/fr, ${{ env.ZEIT_DEPLOYMENT_URL }}/en-US, ${{ env.ZEIT_DEPLOYMENT_URL }}/fr-FR
          locale: en

      # Upload HTML report create by lighthouse, could be useful
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Lighthouse reports
          path: /tmp/lighthouse-artifacts

      # Using a pre-build action to make the action fail if your score is too low. It can be really interesting to track a low score on a commit
      # You can remove this action IF you don't want lighthouse to be a blocking point in your CI
      # Official documentation: https://github.com/foo-software/lighthouse-check-status-action
      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@v1.0.1
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          # XXX We expect bad performances on staging, in particular because of client-side redirect upon first loading (preview mode causes a page refresh)
          minAccessibilityScore: "10"
          minBestPracticesScore: "0"
          minPerformanceScore: "10"
          minProgressiveWebAppScore: "10"
          minSeoScore: "10"
