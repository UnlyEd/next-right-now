# Summary:
# Creates a new deployment on Zeit's platform, when anything is pushed in any branch (except for the "master" branch).
# Read ./README.md for extensive documentation

name: Deploy to Zeit (staging)

on:
  # There are several ways to trigger Github actions - See https://help.github.com/en/actions/reference/events-that-trigger-workflows#example-using-a-single-event for a comprehensive list:
  # "push": Triggers each time a commit is pushed
  # "pull_request": Triggers each time a commit is pushed within a pull request
  # In staging, we use the "pull_request" trigger, because it makes it much easier to write comments within the PR.
  pull_request: # Triggers on each pushed commit associated with a pull request
    branches-ignore:
      - 'master'

jobs:
  # Configures the deployment environment, install dependencies (like node, npm, etc.) that are requirements for the upcoming jobs
  # Ex: Necessary to run `yarn deploy`
  setup-environment:
    name: Setup deployment environment (Ubuntu 18.04 - Node 12.x)
    runs-on: ubuntu-18.04
    steps:
      - name: Installing node.js
        uses: actions/setup-node@v1 # Used to install node environment - XXX https://github.com/actions/setup-node
        with:
          node-version: '12.x' # Use the same node.js version as the one Zeit's uses (currently node12.x)

  # Starts a Zeit deployment, using the staging configuration file of the default institution
  # The default institution is the one defined in the `now.json` file (which is a symlink to the actual file)
  # N.B: It's Zeit that will perform the actual deployment
  start-staging-deployment:
    name: Starts Zeit deployment (staging) (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: setup-environment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Deploying on Zeit
        # Workflow:
        #   - Get stdout from deploy command (stderr shows build steps and stdout shows final url, which is what we are really looking for)
        #   - Set the deployment url that will be included in the eventual PR comment
        #   - Create a branch alias and link it to the deployment (so that each branch has its own domain automatically aliased to the lastest commit)
        run: |
          ZEIT_DEPLOYMENT_OUTPUT=`yarn deploy:$(cat now.json | jq -r '.build.env.NEXT_PUBLIC_CUSTOMER_REF') --token $ZEIT_TOKEN`

          ZEIT_DEPLOYMENT_URL=`echo $ZEIT_DEPLOYMENT_OUTPUT | egrep -o 'https?://[^ ]+.now.sh'`
          echo "::set-env name=ZEIT_DEPLOYMENT_URL::$ZEIT_DEPLOYMENT_URL"

          if [[ ${CURRENT_BRANCH##*/} =~ ^v[0-9]{1,}- ]]; then # Checking if pattern matches with "vX-" where X is a number
            ZEIT_DEPLOYMENT_ALIAS=${CURRENT_BRANCH##*/}
          else
            ZEIT_DEPLOYMENT_ALIAS=$(cat now.json | jq -r '.name')-${CURRENT_BRANCH##*/}
          fi

          # Zeit alias only allows 53 characters in the domain name, so we only keep the first 45 (45 = 53 - 7 - 1) characters (because Zeit needs 7 chars for ".now.sh" at the end of the domain name, and count starts at 1, not 0)
          # Also, in order to remove forbidden characters, we transform every characters which are not a "alnum" and \n or \r into '-'

          ZEIT_DEPLOYMENT_ALIAS=$(echo $ZEIT_DEPLOYMENT_ALIAS | head -c 45 | tr -c '[:alnum:]\r\n' - | tr '[:upper:]' '[:lower:]')

          # Recursively remove any trailing dash ('-')
          while [[ "$ZEIT_DEPLOYMENT_ALIAS" == *- ]]
          do
                  ZEIT_DEPLOYMENT_ALIAS=${ZEIT_DEPLOYMENT_ALIAS::-1}
          done

          ZEIT_DEPLOYMENT_ALIAS=$ZEIT_DEPLOYMENT_ALIAS.now.sh
          echo "::set-env name=ZEIT_DEPLOYMENT_ALIAS::https://$ZEIT_DEPLOYMENT_ALIAS"

          npx now alias $ZEIT_DEPLOYMENT_URL https://$ZEIT_DEPLOYMENT_ALIAS --token $ZEIT_TOKEN
        env:
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }} # Passing github's secret to the worker
          CURRENT_BRANCH: ${{ github.ref }} # Passing current branch to the worker

      # On deployment failure, add a comment to the PR
      - name: Comment PR (Deployment failure)
        uses: peter-evans/create-or-update-comment@v1
        if: failure()
        with:
          token: ${{ secrets.GITHUB_CI_PR_COMMENT }}
          issue-number: ${{ github.event.number }}
          body: |
            [GitHub Actions]
            Deployment **FAILED**
            Commit ${{ github.sha }} failed to deploy to ${{ env.ZEIT_DEPLOYMENT_URL }}
            [click to see logs](https://github.com/UnlyEd/next-right-now/pull/${{ github.event.number }}/checks)

      # On deployment success, add a comment to the PR
      - name: Comment PR (Deployment success)
        uses: peter-evans/create-or-update-comment@v1
        if: success()
        with:
          token: ${{ secrets.GITHUB_CI_PR_COMMENT }}
          issue-number: ${{ github.event.number }}
          body: |
            [GitHub Actions]
            Deployment **SUCCESS**
            Commit ${{ github.sha }} successfully deployed to ${{ env.ZEIT_DEPLOYMENT_URL }}
            Deployment aliased as ${{ env.ZEIT_DEPLOYMENT_ALIAS }}

  # Runs E2E tests against the Zeit deployment
  run-2e2-tests:
    name: Run end to end (E2E) tests (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    # Docker image with Cypress pre-installed
    # https://github.com/cypress-io/cypress-docker-images/tree/master/included
    container: cypress/included:3.8.3
    needs: start-staging-deployment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Resolving deployment url from Zeit
        # The following workflow is:
        #  - getting all deployments data (by using the scope in `now.json`)
        #  - then we get the last url (in Node.js it corresponds as `response.deployments[0].url`
        #  - and then we remove the `"` character to pre-format url
        # We need to set env the url for next step, formatted as `https://${url provided by API}`
        run: |
          apt update -y >/dev/null && apt install -y jq >/dev/null
          ZEIT_DEPLOYMENT=`curl -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.ZEIT_TOKEN }}' https://api.zeit.co/v5/now/deployments?teamId=$(cat now.json | jq -r '.scope') | jq '.deployments [0].url' | tr -d \"`
          echo "::set-env name=ZEIT_DEPLOYMENT_URL::https://$ZEIT_DEPLOYMENT"

      # Run the E2E tests against the new Zeit deployment
      - name: Run E2E tests (Cypress)
        uses: cypress-io/github-action@v1 # XXX See https://github.com/cypress-io/github-action
        with:
          wait-on: ${{ env.ZEIT_DEPLOYMENT_URL }} # Be sure that the endpoint is ready by pinging it before starting tests, it has a timeout of 60seconds
          config-file: cypress/config-customer1.json # The config file itself doesn't matter because we will override most settings anyway. We just need `projectId` to run the tests.
          config: baseUrl=${{ env.ZEIT_DEPLOYMENT_URL }} # Overriding baseUrl provided by config file to test the new deployment

      # On E2E failure, upload screenshots
      - name: Uplad screenshots artifacts (E2E failure)
        uses: actions/upload-artifact@v1 # On failure we upload artifacts, https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts
        if: failure()
        with:
          name: screenshots
          path: cypress/screenshots/

      # On E2E failure, upload videos
      - name: Uplad videos artifacts (E2E failure)
        uses: actions/upload-artifact@v1 # On failure we upload artifacts, https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts
        if: failure()
        with:
          name: videos
          path: cypress/videos/

      # On E2E failure, add a comment to the PR with additional information
      - name: Comment PR (E2E failure)
        uses: peter-evans/create-or-update-comment@v1
        if: failure()
        with:
          token: ${{ secrets.GITHUB_CI_PR_COMMENT }}
          issue-number: ${{ github.event.number }}
          body: |
            [GitHub Actions]
            E2E tests **FAILED**
            Download artifacts (screenshots + videos) from [`checks`](https://github.com/UnlyEd/next-right-now/pull/${{ github.event.number }}/checks) section

      # On E2E success, add a comment to the PR
      - name: Comment PR (E2E success)
        uses: peter-evans/create-or-update-comment@v1
        if: success()
        with:
          token: ${{ secrets.GITHUB_CI_PR_COMMENT }}
          issue-number: ${{ github.event.number }}
          body: |
            [GitHub Actions]
            E2E tests **SUCCESS**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_CI_PR_COMMENT }}

  # Run Lighthouse reports in parallel of E2E tests
  run-lighthouse-tests:
    name: Run LightHouse checks (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: start-staging-deployment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Resolving deployment url from Zeit
        # The following workflow is:
        #  - getting all deployments data (by using the scope in `now.json`)
        #  - then we get the last url (in Node.js it corresponds as `response.deployments[0].url`
        #  - and then we remove the `"` character to pre-format url
        # We need to set env the url for next step, formatted as `https://${url provided by API}`
        run: |
          apt update -y >/dev/null && apt install -y jq >/dev/null
          ZEIT_DEPLOYMENT=`curl -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.ZEIT_TOKEN }}' https://api.zeit.co/v5/now/deployments?teamId=$(cat now.json | jq -r '.scope') | jq '.deployments [0].url' | tr -d \"`
          echo "::set-env name=ZEIT_DEPLOYMENT_URL::https://$ZEIT_DEPLOYMENT"
        env:
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }} # Passing github's secret to the worker
      # In order to store reports and then upload it, we need to create the folder before any tests
      - name: Create temporary folder for artifacts storage
        run: mkdir /tmp/lighthouse-artifacts

      # It runs the lighthouse report for a provided url and create a HTML report in the specified directory
      # Action documentation: https://github.com/marketplace/actions/lighthouse-check#usage-standard-example
      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@v1.0.14
        id: lighthouseCheck
        with: # See https://github.com/marketplace/actions/lighthouse-check#inputs for all options
          accessToken: ${{ secrets.GITHUB_CI_PR_COMMENT }} # Providing a token to comment the PR.
          prCommentEnabled: true # Whether to comment on the PR (default: true).
          prCommentSaveOld: true # If true, then add a new comment for each commit. Otherwise, update the latest comment (default: false).
          outputDirectory: /tmp/lighthouse-artifacts # Used to upload artifacts.
          urls: ${{ env.ZEIT_DEPLOYMENT_URL }}

      # Upload HTML report create by lighthouse, could be useful
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Lighthouse reports
          path: /tmp/lighthouse-artifacts

      # Using a pre-build action to make the action fail if your score is too low. It can be really interesting to track a low score on a commit
      # You can remove this action IF you don't want lighthouse to be a blocking point in your CI
      # This default values so you need to change them by your own criteria
      # Official documentation: https://github.com/foo-software/lighthouse-check-status-action
      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@v1.0.1
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "50"
          minBestPracticesScore: "50"
          minPerformanceScore: "30"
          minProgressiveWebAppScore: "50"
          minSeoScore: "50"
