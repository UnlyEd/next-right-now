# Summary:
# Creates a new production deployment on Vercel's platform, when anything is pushed in the "master" branch.
# Once the deployment has been performed by Vercel, we wait for its status to reach the "READY" state before doing anything else.defaults:
# - Once ready, an HTTP call is sent to the webhook that is configured within the customer config file (VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK). (optional)
# - Once ready, E2E tests are executed on the newly deployed domain (Cypress).
# - Once ready, quality tests are executed on the newly deployed domain (LightHouse).
#
# This workflow can also be triggered using "Workflow Dispatch".
#   See https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch
#   See https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#workflow_dispatch
# This workflow can also be triggered using the API (uses Workflow Dispatch in the background).
#   See src/pages/api/startVercelDeployment.ts
#
# LEARN MORE AT https://unlyed.github.io/next-right-now/guides/ci-cd/
#
# Dependencies overview:
# - See https://github.com/actions/setup-node https://github.com/actions/setup-node/tree/v2
# - See https://github.com/actions/checkout https://github.com/actions/checkout/tree/v1
# - See https://github.com/actions/upload-artifact https://github.com/actions/upload-artifact/tree/v1
# - See https://github.com/rlespinasse/github-slug-action https://github.com/rlespinasse/github-slug-action/tree/3.x
# - See https://github.com/jwalton/gh-find-current-pr https://github.com/jwalton/gh-find-current-pr/tree/v1
# - See https://github.com/peter-evans/create-or-update-comment https://github.com/peter-evans/create-or-update-comment/tree/v1
# - See https://github.com/UnlyEd/github-action-await-vercel https://github.com/UnlyEd/github-action-await-vercel/tree/v1.1.1
# - See https://github.com/UnlyEd/github-action-store-variable https://github.com/UnlyEd/github-action-store-variable/tree/v2.1.1
# - See https://github.com/cypress-io/github-action https://github.com/cypress-io/github-action/tree/v2
# - See https://github.com/foo-software/lighthouse-check-action https://github.com/foo-software/lighthouse-check-action/tree/v1.0.1
# - See https://github.com/bobheadxi/deployments https://github.com/bobheadxi/deployments/tree/v0.4.3

name: Deploy to Vercel (production)

on:
  # There are several ways to trigger Github actions - See https://help.github.com/en/actions/reference/events-that-trigger-workflows#example-using-a-single-event for a comprehensive list:
  # - "push": Triggers each time a commit is pushed
  # - "pull_request": Triggers each time a commit is pushed within a pull request, it makes it much easier to write comments within the PR, but it suffers some strong limitations:
  #   - There is no way to trigger when a PR is merged into another - See https://github.community/t/pull-request-action-does-not-run-on-merge/16092?u=vadorequest
  #   - It won't trigger when the PR is conflicting with its base branch - See https://github.community/t/run-actions-on-pull-requests-with-merge-conflicts/17104/2?u=vadorequest
  push: # Triggers on each pushed commit
    branches:
      - 'master'
      - 'main'
      - 'v2-mst-aptd-at-lcz-sty' # XXX Name of the NRN preset branch, acting as a main branch (all commits pushed to the preset branch are deployed to production)

    # Runs the deployment workflow only when there are changes made to specific files, in any of the below paths
    # Optimizes our CI/CD by not deploying the Next.js site needlessly (faster deploy, lower cost)
    # XXX Filter pattern cheat sheet https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
    paths:
      - '.github/workflows/deploy-vercel-production.yml'
      - 'cypress/**'
      - '!cypress/_examples/**'
      - '!cypress/integration-storybook/**'
      - '!cypress/config-*.json' # Exclude all config files
      - 'cypress/config-customer-ci-cd.json' # Force include CI/CD config file
      - 'public/**'
      - 'scripts/populate-git-env.sh'
      - 'src/**'
      - '!src/stories/**'
      - '.eslint*'
      - '*.js*' # Includes all .js/.json at the root level
      - '*.ts' # Includes all .ts at the root level
      - '.*ignore' # Includes .gitignore and .vercelignore
      - 'yarn.lock'
      - '!**/*.md' # Exclude all markdown files

  # Allow manual trigger via a button in github or a HTTP call - See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#manually-running-a-workflow
  # XXX See https://unlyed.github.io/next-right-now/guides/ci-cd/gha-deploy-vercel#triggering-the-action-remotely-using-workflow_dispatch
  workflow_dispatch:
    inputs:
      customer:
        description: 'Customer to deploy'
        required: true

env:
  STAGE: production

jobs:
  # Configures the deployment environment, install dependencies (like node, npm, etc.) that are requirements for the upcoming jobs
  # Ex: Necessary to run `yarn deploy`
  setup-environment:
    name: Setup deployment environment (Ubuntu 18.04 - Node 14.x)
    runs-on: ubuntu-18.04
    steps:
      - name: Installing node.js
        uses: actions/setup-node@v2 # Used to install node environment - https://github.com/actions/setup-node
        with:
          node-version: '14.x' # Use the same node.js version as the one Vercel's uses (currently node14.x)

  # Starts a Vercel deployment, using the production configuration file of the default customer
  # The default customer is the one defined in the `vercel.json` file (which is a symlink to the actual file)
  # N.B: It's Vercel that will perform the actual deployment
  start-production-deployment:
    name: Starts Vercel deployment (production) (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: setup-environment
    timeout-minutes: 40 # Limit current job timeout https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - See https://github.com/actions/checkout

      #  Resolves customer to deploy from github event input (falls back to resolving it from vercel.json file)
      - name: Resolve customer to deploy
        run: |
          # Resolving customer to deploy based on the github event input, when using manual deployment triggerer through "workflow_dispatch" event
          # Falls back to the customer specified in the vercel.json file, which is most useful when deployment is triggered through "push" event
          MANUAL_TRIGGER_CUSTOMER="${{ github.event.inputs.customer}}"
          echo "MANUAL_TRIGGER_CUSTOMER: " $MANUAL_TRIGGER_CUSTOMER
          echo "MANUAL_TRIGGER_CUSTOMER=$MANUAL_TRIGGER_CUSTOMER" >> $GITHUB_ENV

          CUSTOMER_REF_TO_DEPLOY="${MANUAL_TRIGGER_CUSTOMER:-$(cat vercel.json | jq --raw-output '.build.env.NEXT_PUBLIC_CUSTOMER_REF')}"
          echo "Customer to deploy: " $CUSTOMER_REF_TO_DEPLOY
          echo "CUSTOMER_REF_TO_DEPLOY=$CUSTOMER_REF_TO_DEPLOY" >> $GITHUB_ENV

      # Create a GitHub deployment (within a GitHub environment), useful to keep a public track of all deployments directly in GitHub
      - name: Start GitHub deployment
        uses: bobheadxi/deployments@v0.4.3 # See https://github.com/bobheadxi/deployments
        id: start-github-deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.CUSTOMER_REF_TO_DEPLOY }}-${{ env.STAGE }} # Uses "$customer-$env" as GitHub environment name, because it's easier this way to see what has changed per customer, per stage
          no_override: true # Disables auto marking previous environments as "inactive", as they're still active (Vercel deployments don't auto-deactivate) and it would remove the previous deployment links needlessly

      - name: Deploying on Vercel (${{ env.STAGE }})
        uses: UnlyEd/github-action-deploy-on-vercel@3e71d3e26fd56941fc24a6429fdd257598df2017 # Pin "v1.0.0" - See https://github.com/UnlyEd/github-action-deploy-on-vercel/commit/3e71d3e26fd56941fc24a6429fdd257598df2017
        with:
          command: "yarn deploy:ci:gha:production --token ${{ secrets.VERCEL_TOKEN }}"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # Passing github's secret to the worker
          GIT_COMMIT_REF: ${{ github.ref }} # Passing current branch/tag to the worker
          GIT_COMMIT_SHA: ${{ github.ref }} # Passing current commit SHA to the worker
          CUSTOMER_REF: ${{ env.CUSTOMER_REF_TO_DEPLOY }} # Passing current customer to deploy

      # Update the previously created GitHub deployment, and link it to our Vercel deployment
      - name: Link GitHub deployment to Vercel
        uses: bobheadxi/deployments@v0.4.3 # See https://github.com/bobheadxi/deployments
        id: link-github-deployment-to-vercel
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.start-github-deployment.outputs.deployment_id }}
          env_url: ${{ env.VERCEL_DEPLOYMENT_URL }} # Link the Vercel deployment url to the GitHub environment

      # At the end of the job, store all variables we will need in the following jobs
      # The variables will be stored in and retrieved from a GitHub Artifact (each variable is stored in a different file)
      - name: Store variables for next jobs
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        with:
          variables: |
            CUSTOMER_REF_TO_DEPLOY=${{ env.CUSTOMER_REF_TO_DEPLOY }}
            VERCEL_DEPLOYMENT_URL=${{ env.VERCEL_DEPLOYMENT_URL }}
            VERCEL_DEPLOYMENT_DOMAIN=${{ env.VERCEL_DEPLOYMENT_DOMAIN }}
            MANUAL_TRIGGER_CUSTOMER=${{ env.MANUAL_TRIGGER_CUSTOMER }}
            GITHUB_PULL_REQUEST_ID=${{ steps.pr_id_finder.outputs.number }}

  # Waits for the Vercel deployment to reach "READY" state, so that other actions will be applied on a domain that is really online
  await-for-vercel-deployment:
    name: Await current deployment to be ready (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: start-production-deployment
    timeout-minutes: 5 # Limit current job timeout (including action timeout setup down there) https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - See https://github.com/actions/checkout

      # Restore variables stored by previous jobs
      - name: Restore variables
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        id: restore-variable
        with:
          failIfNotFound: true
          variables: |
            VERCEL_DEPLOYMENT_DOMAIN

      # Wait for deployment to be ready, before running E2E (otherwise Cypress might start testing too early, and gets redirected to Vercel's "Login page", and tests fail)
      - name: Awaiting Vercel deployment to be ready
        uses: UnlyEd/github-action-await-vercel@v1.1.1 # See https://github.com/UnlyEd/github-action-await-vercel
        id: await-vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          deployment-url: ${{ env.VERCEL_DEPLOYMENT_DOMAIN }} # Must only contain the domain name (no http prefix, etc.)
          timeout: 90 # Wait for 90 seconds before failing

      - name: Display deployment status
        run: "echo The deployment is ${{ env.readyState }}"

  # Send a HTTP call to the webhook url that's provided in the customer configuration file (vercel.*.json)
  send-webhook-callback-once-deployment-ready:
    name: Invoke webhook callback url defined by the customer (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: await-for-vercel-deployment
    timeout-minutes: 5 # Limit current job timeout https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - See https://github.com/actions/checkout
      - name: Expose GitHub slug/short variables # See https://github.com/rlespinasse/github-slug-action#exposed-github-environment-variables
        uses: rlespinasse/github-slug-action@v3.x # See https://github.com/rlespinasse/github-slug-action

      # Restore variables stored by previous jobs
      - name: Restore variables
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        id: restore-variable
        with:
          failIfNotFound: true
          variables: |
            MANUAL_TRIGGER_CUSTOMER
            CUSTOMER_REF_TO_DEPLOY

      - name: Expose git environment variables and call webhook (if provided)
        # Workflow overview:
        #  - Resolves webhook url from customer config file
        #  - If a webhook url was defined in the customer config file, send an HTTP request, as POST request, with a JSON request body dynamically generated
        #  - Prints the headers of the POST HTTP request (curl)
        # TODO Convert this into an external bash script if possible, to simplify this step as much as possible
        run: |
          VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK=$(cat vercel.$CUSTOMER_REF_TO_DEPLOY.${{ env.STAGE }}.json | jq --raw-output '.build.env.VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK')
          echo "Vercel deployment webhook url: " $VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK

          # Checking if a webhook url is defined
          if [ -n "$VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK" ]; then
            # Run script that populates git-related variables as ENV variables
            echo "Running script generate-post-data"
            . ./scripts/generate-post-data.sh

            echo "Print generate_post_data():"
            echo "$(generate_post_data)"

            echo "Calling webhook at '$VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK'"
            echo "Sending HTTP request (curl):"
            curl POST \
              "$VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK" \
              -vs \
              --header "Accept: application/json" \
              --header "Content-type: application/json" \
              --data "$(generate_post_data)" \
              2>&1 | sed '/^* /d; /bytes data]$/d; s/> //; s/< //'

            # XXX See https://stackoverflow.com/a/54225157/2391795
            # -vs - add headers (-v) but remove progress bar (-s)
            # 2>&1 - combine stdout and stderr into single stdout
            # sed - edit response produced by curl using the commands below
            #   /^* /d - remove lines starting with '* ' (technical info)
            #   /bytes data]$/d - remove lines ending with 'bytes data]' (technical info)
            #   s/> // - remove '> ' prefix
            #   s/< // - remove '< ' prefix

          else
            echo "No webhook url defined in 'vercel.$CUSTOMER_REF_TO_DEPLOY.${{ env.STAGE }}.json:.build.env.VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK' (found '$VERCEL_DEPLOYMENT_COMPLETED_WEBHOOK')"
          fi
        env:
          GIT_COMMIT_REF: ${{ github.ref }} # Passing current branch/tag to the worker
          GIT_COMMIT_SHA: ${{ github.sha }} # Passing current commit SHA to the worker
          # Passing exposed GitHub environment variables - See https://github.com/rlespinasse/github-slug-action#exposed-github-environment-variables
          DEPLOYMENT_STAGE: ${{ env.STAGE }}
          GITHUB_REF_SLUG: ${{ env.GITHUB_REF_SLUG }}
          GITHUB_HEAD_REF_SLUG: ${{ env.GITHUB_HEAD_REF_SLUG }}
          GITHUB_BASE_REF_SLUG: ${{ env.GITHUB_BASE_REF_SLUG }}
          GITHUB_EVENT_REF_SLUG: ${{ env.GITHUB_EVENT_REF_SLUG }}
          GITHUB_REPOSITORY_SLUG: ${{ env.GITHUB_REPOSITORY_SLUG }}
          GITHUB_REF_SLUG_URL: ${{ env.GITHUB_REF_SLUG_URL }}
          GITHUB_HEAD_REF_SLUG_URL: ${{ env.GITHUB_HEAD_REF_SLUG_URL }}
          GITHUB_BASE_REF_SLUG_URL: ${{ env.GITHUB_BASE_REF_SLUG_URL }}
          GITHUB_EVENT_REF_SLUG_URL: ${{ env.GITHUB_EVENT_REF_SLUG_URL }}
          GITHUB_REPOSITORY_SLUG_URL: ${{ env.GITHUB_REPOSITORY_SLUG_URL }}
          GITHUB_SHA_SHORT: ${{ env.GITHUB_SHA_SHORT }}

  # Runs E2E tests against the Vercel deployment
  run-2e2-tests:
    name: Run end to end (E2E) tests (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    # Docker image with Cypress pre-installed
    # https://github.com/cypress-io/cypress-docker-images/tree/master/included
    container: cypress/included:7.4.0
    needs: await-for-vercel-deployment
    timeout-minutes: 20 # Limit current job timeout https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - See https://github.com/actions/checkout

      # Restore variables stored by previous jobs
      - name: Restore variables
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        id: restore-variable
        with:
          failIfNotFound: true
          variables: |
            VERCEL_DEPLOYMENT_URL

      # Runs the E2E tests against the new Vercel deployment
      - name: Run E2E tests (Cypress)
        uses: cypress-io/github-action@v2 # See https://github.com/cypress-io/github-action
        with:
          # XXX We disabled "wait-on" option, because it's useless. Cypress will fail anyway, because it gets redirected to some internal Vercel URL if the domain isn't yet available - See https://github.com/cypress-io/github-action/issues/270
          # wait-on: '${{ env.VERCEL_DEPLOYMENT_URL }}' # Be sure that the endpoint is ready by pinging it before starting tests, using a default timeout of 60 seconds
          config-file: 'cypress/config-customer-ci-cd.json' # Use Cypress config file for CI/CD, and override it below
          config: baseUrl=${{ env.VERCEL_DEPLOYMENT_URL }} # Overriding baseUrl provided by config file to test the new deployment
        env:
          # Enables Cypress debugging logs, very useful if Cypress crashes, like out-of-memory issues.
          # DEBUG: "cypress:*" # Enable all logs. See https://docs.cypress.io/guides/references/troubleshooting.html#Print-DEBUG-logs
          DEBUG: "cypress:server:util:process_profiler" # Enable logs for "memory and CPU usage". See https://docs.cypress.io/guides/references/troubleshooting.html#Log-memory-and-CPU-usage

      # On E2E failure, upload screenshots
      - name: Upload screenshots artifacts (E2E failure)
        uses: actions/upload-artifact@v1 # On failure we upload artifacts, https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts
        if: failure()
        with:
          name: screenshots
          path: cypress/screenshots/

      # On E2E failure, upload videos
      - name: Upload videos artifacts (E2E failure)
        uses: actions/upload-artifact@v1 # On failure we upload artifacts, https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts
        if: failure()
        with:
          name: videos
          path: cypress/videos/

  # Runs LightHouse reports in parallel of E2E tests
  run-lighthouse-tests:
    name: Run LightHouse checks (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: await-for-vercel-deployment
    timeout-minutes: 5 # Limit current job timeout https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - See https://github.com/actions/checkout

      # To store reports and then upload them, we must create the folder beforehand
      - name: Create temporary folder for artifacts storage
        run: mkdir /tmp/lighthouse-artifacts

      # Restore variables stored by previous jobs
      - name: Restore variables
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        id: restore-variable
        with:
          failIfNotFound: true
          variables: VERCEL_DEPLOYMENT_URL

      # Runs LightHouse for a given url and create HTML reports in the specified directory (outputDirectory)
      # Action documentation: https://github.com/marketplace/actions/lighthouse-check#usage-standard-example
      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@v2.0.5
        id: lighthouseCheck
        with: # See https://github.com/marketplace/actions/lighthouse-check#inputs for all options
          # XXX We don't enable comments, because there is no branch to write them into
          outputDirectory: /tmp/lighthouse-artifacts # Used to upload artifacts.
          emulatedFormFactor: all # Run LightHouse against "mobile", "desktop", or "all" devices
          urls: ${{ env.VERCEL_DEPLOYMENT_URL }}, ${{ env.VERCEL_DEPLOYMENT_URL }}/en, ${{ env.VERCEL_DEPLOYMENT_URL }}/fr
          locale: en

      # Upload HTML report created by lighthouse as an artifact.
      # XXX Disable this if you don't use them, as they are a bit heavy (~3MB) and might cost you money, if you're using a private repository
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Lighthouse reports
          path: /tmp/lighthouse-artifacts

      # Using a pre-build action to make the action fail if your score is too low. It can be really interesting to track a low score on a commit
      # You can remove this action IF you don't want lighthouse to be a blocking point in your CI
      # Official documentation: https://github.com/foo-software/lighthouse-check-status-action
      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@v1.0.1 # See https://github.com/foo-software/lighthouse-check-action
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "50"
          minBestPracticesScore: "50"
          minPerformanceScore: "30"
          minProgressiveWebAppScore: "50"
          minSeoScore: "50"
