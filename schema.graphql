# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"An object with an ID"
interface Node {
  "The id of the object."
  id: ID!
}

type AggregateAsset {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateTheme {
  count: Int!
}

type Asset implements Node {
  createdAt: DateTime!
  fileName: String!
  handle: String!
  height: Float
  id: ID!
  imagesProduct(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]
  logoTheme(after: String, before: String, first: Int, last: Int, orderBy: ThemeOrderByInput, skip: Int, where: ThemeWhereInput): [Theme!]
  mimeType: String
  size: Float
  status: Status!
  updatedAt: DateTime!
  "Get the url for the asset with provided transformations applied."
  url(transformation: AssetTransformationInput): String!
  width: Float
}

"A connection to a list of items."
type AssetConnection {
  aggregate: AggregateAsset!
  "A list of edges."
  edges: [AssetEdge]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type AssetEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Asset!
}

type AssetPreviousValues {
  createdAt: DateTime!
  fileName: String!
  handle: String!
  height: Float
  id: ID!
  mimeType: String
  size: Float
  status: Status!
  updatedAt: DateTime!
  width: Float
}

type AssetSubscriptionPayload {
  mutation: MutationType!
  node: Asset
  previousValues: AssetPreviousValues
  updatedFields: [String!]
}

type BatchPayload {
  "The number of nodes that have been affected by the Batch operation."
  count: Long!
}

type Customer implements Node {
  createdAt: DateTime!
  id: ID!
  label(locale: Locale): String
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]
  ref: String!
  status: Status!
  terms(locale: Locale): RichText
  theme: Theme
  updatedAt: DateTime!
}

"A connection to a list of items."
type CustomerConnection {
  aggregate: AggregateCustomer!
  "A list of edges."
  edges: [CustomerEdge]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type CustomerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer!
}

type CustomerPreviousValues {
  createdAt: DateTime!
  id: ID!
  labelEN: String
  ref: String!
  status: Status!
  termsEN: RichText
  updatedAt: DateTime!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  previousValues: CustomerPreviousValues
  updatedFields: [String!]
}

type Mutation {
  createAsset(data: AssetCreateInput!): Asset!
  createCustomer(data: CustomerCreateInput!): Customer!
  createProduct(data: ProductCreateInput!): Product!
  createTheme(data: ThemeCreateInput!): Theme!
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyAssets(where: AssetWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyThemes(where: ThemeWhereInput): BatchPayload!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteTheme(where: ThemeWhereUniqueInput!): Theme
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyAssets(data: AssetUpdateManyMutationInput!, where: AssetWhereInput): BatchPayload!
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyThemes(data: ThemeUpdateManyMutationInput!, where: ThemeWhereInput): BatchPayload!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateTheme(data: ThemeUpdateInput!, where: ThemeWhereUniqueInput!): Theme
  uploadAsset(data: AssetUploadInput!): Asset!
  upsertAsset(create: AssetCreateInput!, update: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset!
  upsertCustomer(create: CustomerCreateInput!, update: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  upsertProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  upsertTheme(create: ThemeCreateInput!, update: ThemeUpdateInput!, where: ThemeWhereUniqueInput!): Theme!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Product implements Node {
  createdAt: DateTime!
  customer: Customer
  description: String
  id: ID!
  images(after: String, before: String, first: Int, last: Int, orderBy: AssetOrderByInput, skip: Int, where: AssetWhereInput): [Asset!]
  inventoryID: String
  price: Float
  status: Status!
  title: String!
  updatedAt: DateTime!
}

"A connection to a list of items."
type ProductConnection {
  aggregate: AggregateProduct!
  "A list of edges."
  edges: [ProductEdge]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type ProductEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

type ProductPreviousValues {
  createdAt: DateTime!
  description: String
  id: ID!
  inventoryID: String
  price: Float
  status: Status!
  title: String!
  updatedAt: DateTime!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  previousValues: ProductPreviousValues
  updatedFields: [String!]
}

type Query {
  asset(where: AssetWhereUniqueInput!): Asset
  assets(after: String, before: String, first: Int, last: Int, orderBy: AssetOrderByInput, skip: Int, where: AssetWhereInput): [Asset]!
  assetsConnection(after: String, before: String, first: Int, last: Int, orderBy: AssetOrderByInput, skip: Int, where: AssetWhereInput): AssetConnection!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(after: String, before: String, first: Int, last: Int, orderBy: CustomerOrderByInput, skip: Int, where: CustomerWhereInput): [Customer]!
  customersConnection(after: String, before: String, first: Int, last: Int, orderBy: CustomerOrderByInput, skip: Int, where: CustomerWhereInput): CustomerConnection!
  "Fetches an object given its ID"
  node(
    #The ID of an object
    id: ID!
  ): Node
  product(where: ProductWhereUniqueInput!): Product
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product]!
  productsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): ProductConnection!
  theme(where: ThemeWhereUniqueInput!): Theme
  themes(after: String, before: String, first: Int, last: Int, orderBy: ThemeOrderByInput, skip: Int, where: ThemeWhereInput): [Theme]!
  themesConnection(after: String, before: String, first: Int, last: Int, orderBy: ThemeOrderByInput, skip: Int, where: ThemeWhereInput): ThemeConnection!
}

"Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values"
type RichText {
  html: String
  markdown: String
  raw: RichTextAST
  text: String
}

type Theme implements Node {
  createdAt: DateTime!
  customer: Customer
  id: ID!
  logo: Asset
  primaryColor: String!
  status: Status!
  updatedAt: DateTime!
}

"A connection to a list of items."
type ThemeConnection {
  aggregate: AggregateTheme!
  "A list of edges."
  edges: [ThemeEdge]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type ThemeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Theme!
}

type ThemePreviousValues {
  createdAt: DateTime!
  id: ID!
  primaryColor: String!
  status: Status!
  updatedAt: DateTime!
}

type ThemeSubscriptionPayload {
  mutation: MutationType!
  node: Theme
  previousValues: ThemePreviousValues
  updatedFields: [String!]
}

enum AssetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  fileName_ASC
  fileName_DESC
  handle_ASC
  handle_DESC
  height_ASC
  height_DESC
  id_ASC
  id_DESC
  mimeType_ASC
  mimeType_DESC
  size_ASC
  size_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  width_ASC
  width_DESC
}

enum CustomerOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  labelEN_ASC
  labelEN_DESC
  ref_ASC
  ref_DESC
  status_ASC
  status_DESC
  termsEN_ASC
  termsEN_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum DocumentFileTypes {
  doc
  docx
  html
  jpg
  odp
  ods
  odt
  pdf
  png
  ppt
  pptx
  svg
  txt
  webp
  xls
  xlsx
}

enum ImageFit {
  #Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  clip
  #Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.
  crop
  #Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.
  max
  #Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.
  scale
}

enum Locale {
  EN
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

enum ProductOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  inventoryID_ASC
  inventoryID_DESC
  price_ASC
  price_DESC
  status_ASC
  status_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum Status {
  ARCHIVED
  DRAFT
  PUBLISHED
}

enum ThemeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  primaryColor_ASC
  primaryColor_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AssetCreateInput {
  fileName: String!
  handle: String!
  height: Float
  imagesProduct: ProductCreateManyWithoutImagesInput
  logoTheme: ThemeCreateManyWithoutLogoInput
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetCreateManyWithoutImagesProductInput {
  connect: [AssetWhereUniqueInput!]
  create: [AssetCreateWithoutImagesProductInput!]
  upload: [AssetUploadWithoutImagesProductInput!]
}

input AssetCreateOneWithoutLogoThemeInput {
  connect: AssetWhereUniqueInput
  create: AssetCreateWithoutLogoThemeInput
  upload: AssetUploadWithoutLogoThemeInput
}

input AssetCreateWithoutImagesProductInput {
  fileName: String!
  handle: String!
  height: Float
  logoTheme: ThemeCreateManyWithoutLogoInput
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetCreateWithoutLogoThemeInput {
  fileName: String!
  handle: String!
  height: Float
  imagesProduct: ProductCreateManyWithoutImagesInput
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetScalarWhereInput {
  "Logical AND on all given filters."
  AND: [AssetScalarWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [AssetScalarWhereInput!]
  "Logical OR on all given filters."
  OR: [AssetScalarWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  fileName: String
  "All values containing the given string."
  fileName_contains: String
  "All values ending with the given string."
  fileName_ends_with: String
  "All values greater than the given value."
  fileName_gt: String
  "All values greater than or equal the given value."
  fileName_gte: String
  "All values that are contained in given list."
  fileName_in: [String!]
  "All values less than the given value."
  fileName_lt: String
  "All values less than or equal the given value."
  fileName_lte: String
  "All values that are not equal to given value."
  fileName_not: String
  "All values not containing the given string."
  fileName_not_contains: String
  "All values not ending with the given string."
  fileName_not_ends_with: String
  "All values that are not contained in given list."
  fileName_not_in: [String!]
  "All values not starting with the given string."
  fileName_not_starts_with: String
  "All values starting with the given string."
  fileName_starts_with: String
  handle: String
  "All values containing the given string."
  handle_contains: String
  "All values ending with the given string."
  handle_ends_with: String
  "All values greater than the given value."
  handle_gt: String
  "All values greater than or equal the given value."
  handle_gte: String
  "All values that are contained in given list."
  handle_in: [String!]
  "All values less than the given value."
  handle_lt: String
  "All values less than or equal the given value."
  handle_lte: String
  "All values that are not equal to given value."
  handle_not: String
  "All values not containing the given string."
  handle_not_contains: String
  "All values not ending with the given string."
  handle_not_ends_with: String
  "All values that are not contained in given list."
  handle_not_in: [String!]
  "All values not starting with the given string."
  handle_not_starts_with: String
  "All values starting with the given string."
  handle_starts_with: String
  height: Float
  "All values greater than the given value."
  height_gt: Float
  "All values greater than or equal the given value."
  height_gte: Float
  "All values that are contained in given list."
  height_in: [Float!]
  "All values less than the given value."
  height_lt: Float
  "All values less than or equal the given value."
  height_lte: Float
  "All values that are not equal to given value."
  height_not: Float
  "All values that are not contained in given list."
  height_not_in: [Float!]
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  mimeType: String
  "All values containing the given string."
  mimeType_contains: String
  "All values ending with the given string."
  mimeType_ends_with: String
  "All values greater than the given value."
  mimeType_gt: String
  "All values greater than or equal the given value."
  mimeType_gte: String
  "All values that are contained in given list."
  mimeType_in: [String!]
  "All values less than the given value."
  mimeType_lt: String
  "All values less than or equal the given value."
  mimeType_lte: String
  "All values that are not equal to given value."
  mimeType_not: String
  "All values not containing the given string."
  mimeType_not_contains: String
  "All values not ending with the given string."
  mimeType_not_ends_with: String
  "All values that are not contained in given list."
  mimeType_not_in: [String!]
  "All values not starting with the given string."
  mimeType_not_starts_with: String
  "All values starting with the given string."
  mimeType_starts_with: String
  size: Float
  "All values greater than the given value."
  size_gt: Float
  "All values greater than or equal the given value."
  size_gte: Float
  "All values that are contained in given list."
  size_in: [Float!]
  "All values less than the given value."
  size_lt: Float
  "All values less than or equal the given value."
  size_lte: Float
  "All values that are not equal to given value."
  size_not: Float
  "All values that are not contained in given list."
  size_not_in: [Float!]
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
  width: Float
  "All values greater than the given value."
  width_gt: Float
  "All values greater than or equal the given value."
  width_gte: Float
  "All values that are contained in given list."
  width_in: [Float!]
  "All values less than the given value."
  width_lt: Float
  "All values less than or equal the given value."
  width_lte: Float
  "All values that are not equal to given value."
  width_not: Float
  "All values that are not contained in given list."
  width_not_in: [Float!]
}

input AssetSubscriptionWhereInput {
  "Logical AND on all given filters."
  AND: [AssetSubscriptionWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [AssetSubscriptionWhereInput!]
  "Logical OR on all given filters."
  OR: [AssetSubscriptionWhereInput!]
  "The subscription event gets dispatched when it's listed in mutation_in"
  mutation_in: [MutationType!]
  node: AssetWhereInput
  "The subscription event gets only dispatched when one of the updated fields names is included in this list"
  updatedFields_contains: String
  "The subscription event gets only dispatched when all of the field names included in this list have been updated"
  updatedFields_contains_every: [String!]
  "The subscription event gets only dispatched when some of the field names included in this list have been updated"
  updatedFields_contains_some: [String!]
}

"Transformations for Assets"
input AssetTransformationInput {
  document: DocumentTransformationInput
  image: ImageTransformationInput
  "Pass `true` if you want to validate the passed transformation parameters"
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  fileName: String
  handle: String
  height: Float
  imagesProduct: ProductUpdateManyWithoutImagesInput
  logoTheme: ThemeUpdateManyWithoutLogoInput
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetUpdateManyDataInput {
  fileName: String
  handle: String
  height: Float
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetUpdateManyMutationInput {
  fileName: String
  handle: String
  height: Float
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetUpdateManyWithWhereNestedInput {
  data: AssetUpdateManyDataInput!
  where: AssetScalarWhereInput!
}

input AssetUpdateManyWithoutImagesProductInput {
  connect: [AssetWhereUniqueInput!]
  create: [AssetCreateWithoutImagesProductInput!]
  delete: [AssetWhereUniqueInput!]
  deleteMany: [AssetScalarWhereInput!]
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutImagesProductInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutImagesProductInput!]
}

input AssetUpdateOneWithoutLogoThemeInput {
  connect: AssetWhereUniqueInput
  create: AssetCreateWithoutLogoThemeInput
  delete: Boolean
  disconnect: Boolean
  update: AssetUpdateWithoutLogoThemeDataInput
  upsert: AssetUpsertWithoutLogoThemeInput
}

input AssetUpdateWithWhereUniqueWithoutImagesProductInput {
  data: AssetUpdateWithoutImagesProductDataInput!
  where: AssetWhereUniqueInput!
}

input AssetUpdateWithoutImagesProductDataInput {
  fileName: String
  handle: String
  height: Float
  logoTheme: ThemeUpdateManyWithoutLogoInput
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetUpdateWithoutLogoThemeDataInput {
  fileName: String
  handle: String
  height: Float
  imagesProduct: ProductUpdateManyWithoutImagesInput
  mimeType: String
  size: Float
  status: Status
  width: Float
}

input AssetUploadInput {
  imagesProduct: ProductCreateManyWithoutImagesInput
  logoTheme: ThemeCreateManyWithoutLogoInput
  status: Status
  url: String!
}

input AssetUploadWithoutImagesProductInput {
  logoTheme: ThemeCreateManyWithoutLogoInput
  status: Status
  url: String!
}

input AssetUploadWithoutLogoThemeInput {
  imagesProduct: ProductCreateManyWithoutImagesInput
  status: Status
  url: String!
}

input AssetUpsertWithWhereUniqueWithoutImagesProductInput {
  create: AssetCreateWithoutImagesProductInput!
  update: AssetUpdateWithoutImagesProductDataInput!
  where: AssetWhereUniqueInput!
}

input AssetUpsertWithoutLogoThemeInput {
  create: AssetCreateWithoutLogoThemeInput!
  update: AssetUpdateWithoutLogoThemeDataInput!
}

input AssetWhereInput {
  "Logical AND on all given filters."
  AND: [AssetWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [AssetWhereInput!]
  "Logical OR on all given filters."
  OR: [AssetWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  fileName: String
  "All values containing the given string."
  fileName_contains: String
  "All values ending with the given string."
  fileName_ends_with: String
  "All values greater than the given value."
  fileName_gt: String
  "All values greater than or equal the given value."
  fileName_gte: String
  "All values that are contained in given list."
  fileName_in: [String!]
  "All values less than the given value."
  fileName_lt: String
  "All values less than or equal the given value."
  fileName_lte: String
  "All values that are not equal to given value."
  fileName_not: String
  "All values not containing the given string."
  fileName_not_contains: String
  "All values not ending with the given string."
  fileName_not_ends_with: String
  "All values that are not contained in given list."
  fileName_not_in: [String!]
  "All values not starting with the given string."
  fileName_not_starts_with: String
  "All values starting with the given string."
  fileName_starts_with: String
  handle: String
  "All values containing the given string."
  handle_contains: String
  "All values ending with the given string."
  handle_ends_with: String
  "All values greater than the given value."
  handle_gt: String
  "All values greater than or equal the given value."
  handle_gte: String
  "All values that are contained in given list."
  handle_in: [String!]
  "All values less than the given value."
  handle_lt: String
  "All values less than or equal the given value."
  handle_lte: String
  "All values that are not equal to given value."
  handle_not: String
  "All values not containing the given string."
  handle_not_contains: String
  "All values not ending with the given string."
  handle_not_ends_with: String
  "All values that are not contained in given list."
  handle_not_in: [String!]
  "All values not starting with the given string."
  handle_not_starts_with: String
  "All values starting with the given string."
  handle_starts_with: String
  height: Float
  "All values greater than the given value."
  height_gt: Float
  "All values greater than or equal the given value."
  height_gte: Float
  "All values that are contained in given list."
  height_in: [Float!]
  "All values less than the given value."
  height_lt: Float
  "All values less than or equal the given value."
  height_lte: Float
  "All values that are not equal to given value."
  height_not: Float
  "All values that are not contained in given list."
  height_not_in: [Float!]
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  imagesProduct_every: ProductWhereInput
  imagesProduct_none: ProductWhereInput
  imagesProduct_some: ProductWhereInput
  logoTheme_every: ThemeWhereInput
  logoTheme_none: ThemeWhereInput
  logoTheme_some: ThemeWhereInput
  mimeType: String
  "All values containing the given string."
  mimeType_contains: String
  "All values ending with the given string."
  mimeType_ends_with: String
  "All values greater than the given value."
  mimeType_gt: String
  "All values greater than or equal the given value."
  mimeType_gte: String
  "All values that are contained in given list."
  mimeType_in: [String!]
  "All values less than the given value."
  mimeType_lt: String
  "All values less than or equal the given value."
  mimeType_lte: String
  "All values that are not equal to given value."
  mimeType_not: String
  "All values not containing the given string."
  mimeType_not_contains: String
  "All values not ending with the given string."
  mimeType_not_ends_with: String
  "All values that are not contained in given list."
  mimeType_not_in: [String!]
  "All values not starting with the given string."
  mimeType_not_starts_with: String
  "All values starting with the given string."
  mimeType_starts_with: String
  size: Float
  "All values greater than the given value."
  size_gt: Float
  "All values greater than or equal the given value."
  size_gte: Float
  "All values that are contained in given list."
  size_in: [Float!]
  "All values less than the given value."
  size_lt: Float
  "All values less than or equal the given value."
  size_lte: Float
  "All values that are not equal to given value."
  size_not: Float
  "All values that are not contained in given list."
  size_not_in: [Float!]
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
  width: Float
  "All values greater than the given value."
  width_gt: Float
  "All values greater than or equal the given value."
  width_gte: Float
  "All values that are contained in given list."
  width_in: [Float!]
  "All values less than the given value."
  width_lt: Float
  "All values less than or equal the given value."
  width_lte: Float
  "All values that are not equal to given value."
  width_not: Float
  "All values that are not contained in given list."
  width_not_in: [Float!]
}

input AssetWhereUniqueInput {
  handle: String
  id: ID
}

input CustomerCreateInput {
  labelEN: String
  products: ProductCreateManyWithoutCustomerInput
  ref: String!
  status: Status
  termsEN: RichTextAST
  theme: ThemeCreateOneWithoutCustomerInput
}

input CustomerCreateOneWithoutProductsInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutProductsInput
}

input CustomerCreateOneWithoutThemeInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutThemeInput
}

input CustomerCreateWithoutProductsInput {
  labelEN: String
  ref: String!
  status: Status
  termsEN: RichTextAST
  theme: ThemeCreateOneWithoutCustomerInput
}

input CustomerCreateWithoutThemeInput {
  labelEN: String
  products: ProductCreateManyWithoutCustomerInput
  ref: String!
  status: Status
  termsEN: RichTextAST
}

input CustomerSubscriptionWhereInput {
  "Logical AND on all given filters."
  AND: [CustomerSubscriptionWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [CustomerSubscriptionWhereInput!]
  "Logical OR on all given filters."
  OR: [CustomerSubscriptionWhereInput!]
  "The subscription event gets dispatched when it's listed in mutation_in"
  mutation_in: [MutationType!]
  node: CustomerWhereInput
  "The subscription event gets only dispatched when one of the updated fields names is included in this list"
  updatedFields_contains: String
  "The subscription event gets only dispatched when all of the field names included in this list have been updated"
  updatedFields_contains_every: [String!]
  "The subscription event gets only dispatched when some of the field names included in this list have been updated"
  updatedFields_contains_some: [String!]
}

input CustomerUpdateInput {
  labelEN: String
  products: ProductUpdateManyWithoutCustomerInput
  ref: String
  status: Status
  termsEN: RichTextAST
  theme: ThemeUpdateOneWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  labelEN: String
  ref: String
  status: Status
  termsEN: RichTextAST
}

input CustomerUpdateOneWithoutProductsInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  update: CustomerUpdateWithoutProductsDataInput
  upsert: CustomerUpsertWithoutProductsInput
}

input CustomerUpdateOneWithoutThemeInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutThemeInput
  delete: Boolean
  disconnect: Boolean
  update: CustomerUpdateWithoutThemeDataInput
  upsert: CustomerUpsertWithoutThemeInput
}

input CustomerUpdateWithoutProductsDataInput {
  labelEN: String
  ref: String
  status: Status
  termsEN: RichTextAST
  theme: ThemeUpdateOneWithoutCustomerInput
}

input CustomerUpdateWithoutThemeDataInput {
  labelEN: String
  products: ProductUpdateManyWithoutCustomerInput
  ref: String
  status: Status
  termsEN: RichTextAST
}

input CustomerUpsertWithoutProductsInput {
  create: CustomerCreateWithoutProductsInput!
  update: CustomerUpdateWithoutProductsDataInput!
}

input CustomerUpsertWithoutThemeInput {
  create: CustomerCreateWithoutThemeInput!
  update: CustomerUpdateWithoutThemeDataInput!
}

input CustomerWhereInput {
  "Logical AND on all given filters."
  AND: [CustomerWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [CustomerWhereInput!]
  "Logical OR on all given filters."
  OR: [CustomerWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  labelEN: String
  "All values containing the given string."
  labelEN_contains: String
  "All values ending with the given string."
  labelEN_ends_with: String
  "All values greater than the given value."
  labelEN_gt: String
  "All values greater than or equal the given value."
  labelEN_gte: String
  "All values that are contained in given list."
  labelEN_in: [String!]
  "All values less than the given value."
  labelEN_lt: String
  "All values less than or equal the given value."
  labelEN_lte: String
  "All values that are not equal to given value."
  labelEN_not: String
  "All values not containing the given string."
  labelEN_not_contains: String
  "All values not ending with the given string."
  labelEN_not_ends_with: String
  "All values that are not contained in given list."
  labelEN_not_in: [String!]
  "All values not starting with the given string."
  labelEN_not_starts_with: String
  "All values starting with the given string."
  labelEN_starts_with: String
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
  ref: String
  "All values containing the given string."
  ref_contains: String
  "All values ending with the given string."
  ref_ends_with: String
  "All values greater than the given value."
  ref_gt: String
  "All values greater than or equal the given value."
  ref_gte: String
  "All values that are contained in given list."
  ref_in: [String!]
  "All values less than the given value."
  ref_lt: String
  "All values less than or equal the given value."
  ref_lte: String
  "All values that are not equal to given value."
  ref_not: String
  "All values not containing the given string."
  ref_not_contains: String
  "All values not ending with the given string."
  ref_not_ends_with: String
  "All values that are not contained in given list."
  ref_not_in: [String!]
  "All values not starting with the given string."
  ref_not_starts_with: String
  "All values starting with the given string."
  ref_starts_with: String
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  theme: ThemeWhereInput
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
}

input CustomerWhereUniqueInput {
  id: ID
  ref: String
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:

  PDF:\tjpg, odp, ods, odt, png, svg, txt, and webp
  DOC:\tdocx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:\tdoc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:\tdoc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:\tjpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:\tjpg, pdf, ods, png, svg, xls, and webp
  ODS:\tjpg, pdf, png, xls, svg, xlsx, and webp
  PPT:\tjpg, odp, pdf, png, svg, pptx, and webp
  PPTX:\tjpg, odp, pdf, png, svg, ppt, and webp
  ODP:\tjpg, pdf, png, ppt, svg, pptx, and webp
  BMP:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  AI:\t    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:\tjpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:\tjpg, odp, ods, odt, pdf, png, and webp
  HTML:\tjpg, odt, pdf, svg, txt, and webp
  TXT:\tjpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"Transformations for Documents"
input DocumentTransformationInput {
  "Changes the output for the file."
  output: DocumentOutputInput
}

input ImageResizeInput {
  "The default value for the fit parameter is fit:clip."
  fit: ImageFit
  "The height in pixels to resize the image to. The value must be an integer from 1 to 10000."
  height: Int
  "The width in pixels to resize the image to. The value must be an integer from 1 to 10000."
  width: Int
}

"Transformations for Images"
input ImageTransformationInput {
  "Resizes the image"
  resize: ImageResizeInput
}

input ProductCreateInput {
  customer: CustomerCreateOneWithoutProductsInput
  description: String
  images: AssetCreateManyWithoutImagesProductInput
  inventoryID: String
  price: Float
  status: Status
  title: String!
}

input ProductCreateManyWithoutCustomerInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCustomerInput!]
}

input ProductCreateManyWithoutImagesInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutImagesInput!]
}

input ProductCreateWithoutCustomerInput {
  description: String
  images: AssetCreateManyWithoutImagesProductInput
  inventoryID: String
  price: Float
  status: Status
  title: String!
}

input ProductCreateWithoutImagesInput {
  customer: CustomerCreateOneWithoutProductsInput
  description: String
  inventoryID: String
  price: Float
  status: Status
  title: String!
}

input ProductScalarWhereInput {
  "Logical AND on all given filters."
  AND: [ProductScalarWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [ProductScalarWhereInput!]
  "Logical OR on all given filters."
  OR: [ProductScalarWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  description: String
  "All values containing the given string."
  description_contains: String
  "All values ending with the given string."
  description_ends_with: String
  "All values greater than the given value."
  description_gt: String
  "All values greater than or equal the given value."
  description_gte: String
  "All values that are contained in given list."
  description_in: [String!]
  "All values less than the given value."
  description_lt: String
  "All values less than or equal the given value."
  description_lte: String
  "All values that are not equal to given value."
  description_not: String
  "All values not containing the given string."
  description_not_contains: String
  "All values not ending with the given string."
  description_not_ends_with: String
  "All values that are not contained in given list."
  description_not_in: [String!]
  "All values not starting with the given string."
  description_not_starts_with: String
  "All values starting with the given string."
  description_starts_with: String
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  inventoryID: String
  "All values containing the given string."
  inventoryID_contains: String
  "All values ending with the given string."
  inventoryID_ends_with: String
  "All values greater than the given value."
  inventoryID_gt: String
  "All values greater than or equal the given value."
  inventoryID_gte: String
  "All values that are contained in given list."
  inventoryID_in: [String!]
  "All values less than the given value."
  inventoryID_lt: String
  "All values less than or equal the given value."
  inventoryID_lte: String
  "All values that are not equal to given value."
  inventoryID_not: String
  "All values not containing the given string."
  inventoryID_not_contains: String
  "All values not ending with the given string."
  inventoryID_not_ends_with: String
  "All values that are not contained in given list."
  inventoryID_not_in: [String!]
  "All values not starting with the given string."
  inventoryID_not_starts_with: String
  "All values starting with the given string."
  inventoryID_starts_with: String
  price: Float
  "All values greater than the given value."
  price_gt: Float
  "All values greater than or equal the given value."
  price_gte: Float
  "All values that are contained in given list."
  price_in: [Float!]
  "All values less than the given value."
  price_lt: Float
  "All values less than or equal the given value."
  price_lte: Float
  "All values that are not equal to given value."
  price_not: Float
  "All values that are not contained in given list."
  price_not_in: [Float!]
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  title: String
  "All values containing the given string."
  title_contains: String
  "All values ending with the given string."
  title_ends_with: String
  "All values greater than the given value."
  title_gt: String
  "All values greater than or equal the given value."
  title_gte: String
  "All values that are contained in given list."
  title_in: [String!]
  "All values less than the given value."
  title_lt: String
  "All values less than or equal the given value."
  title_lte: String
  "All values that are not equal to given value."
  title_not: String
  "All values not containing the given string."
  title_not_contains: String
  "All values not ending with the given string."
  title_not_ends_with: String
  "All values that are not contained in given list."
  title_not_in: [String!]
  "All values not starting with the given string."
  title_not_starts_with: String
  "All values starting with the given string."
  title_starts_with: String
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
}

input ProductSubscriptionWhereInput {
  "Logical AND on all given filters."
  AND: [ProductSubscriptionWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [ProductSubscriptionWhereInput!]
  "Logical OR on all given filters."
  OR: [ProductSubscriptionWhereInput!]
  "The subscription event gets dispatched when it's listed in mutation_in"
  mutation_in: [MutationType!]
  node: ProductWhereInput
  "The subscription event gets only dispatched when one of the updated fields names is included in this list"
  updatedFields_contains: String
  "The subscription event gets only dispatched when all of the field names included in this list have been updated"
  updatedFields_contains_every: [String!]
  "The subscription event gets only dispatched when some of the field names included in this list have been updated"
  updatedFields_contains_some: [String!]
}

input ProductUpdateInput {
  customer: CustomerUpdateOneWithoutProductsInput
  description: String
  images: AssetUpdateManyWithoutImagesProductInput
  inventoryID: String
  price: Float
  status: Status
  title: String
}

input ProductUpdateManyDataInput {
  description: String
  inventoryID: String
  price: Float
  status: Status
  title: String
}

input ProductUpdateManyMutationInput {
  description: String
  inventoryID: String
  price: Float
  status: Status
  title: String
}

input ProductUpdateManyWithWhereNestedInput {
  data: ProductUpdateManyDataInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutCustomerInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCustomerInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCustomerInput!]
}

input ProductUpdateManyWithoutImagesInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutImagesInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutImagesInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutImagesInput!]
}

input ProductUpdateWithWhereUniqueWithoutCustomerInput {
  data: ProductUpdateWithoutCustomerDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutImagesInput {
  data: ProductUpdateWithoutImagesDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutCustomerDataInput {
  description: String
  images: AssetUpdateManyWithoutImagesProductInput
  inventoryID: String
  price: Float
  status: Status
  title: String
}

input ProductUpdateWithoutImagesDataInput {
  customer: CustomerUpdateOneWithoutProductsInput
  description: String
  inventoryID: String
  price: Float
  status: Status
  title: String
}

input ProductUpsertWithWhereUniqueWithoutCustomerInput {
  create: ProductCreateWithoutCustomerInput!
  update: ProductUpdateWithoutCustomerDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutImagesInput {
  create: ProductCreateWithoutImagesInput!
  update: ProductUpdateWithoutImagesDataInput!
  where: ProductWhereUniqueInput!
}

input ProductWhereInput {
  "Logical AND on all given filters."
  AND: [ProductWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [ProductWhereInput!]
  "Logical OR on all given filters."
  OR: [ProductWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  customer: CustomerWhereInput
  description: String
  "All values containing the given string."
  description_contains: String
  "All values ending with the given string."
  description_ends_with: String
  "All values greater than the given value."
  description_gt: String
  "All values greater than or equal the given value."
  description_gte: String
  "All values that are contained in given list."
  description_in: [String!]
  "All values less than the given value."
  description_lt: String
  "All values less than or equal the given value."
  description_lte: String
  "All values that are not equal to given value."
  description_not: String
  "All values not containing the given string."
  description_not_contains: String
  "All values not ending with the given string."
  description_not_ends_with: String
  "All values that are not contained in given list."
  description_not_in: [String!]
  "All values not starting with the given string."
  description_not_starts_with: String
  "All values starting with the given string."
  description_starts_with: String
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  images_every: AssetWhereInput
  images_none: AssetWhereInput
  images_some: AssetWhereInput
  inventoryID: String
  "All values containing the given string."
  inventoryID_contains: String
  "All values ending with the given string."
  inventoryID_ends_with: String
  "All values greater than the given value."
  inventoryID_gt: String
  "All values greater than or equal the given value."
  inventoryID_gte: String
  "All values that are contained in given list."
  inventoryID_in: [String!]
  "All values less than the given value."
  inventoryID_lt: String
  "All values less than or equal the given value."
  inventoryID_lte: String
  "All values that are not equal to given value."
  inventoryID_not: String
  "All values not containing the given string."
  inventoryID_not_contains: String
  "All values not ending with the given string."
  inventoryID_not_ends_with: String
  "All values that are not contained in given list."
  inventoryID_not_in: [String!]
  "All values not starting with the given string."
  inventoryID_not_starts_with: String
  "All values starting with the given string."
  inventoryID_starts_with: String
  price: Float
  "All values greater than the given value."
  price_gt: Float
  "All values greater than or equal the given value."
  price_gte: Float
  "All values that are contained in given list."
  price_in: [Float!]
  "All values less than the given value."
  price_lt: Float
  "All values less than or equal the given value."
  price_lte: Float
  "All values that are not equal to given value."
  price_not: Float
  "All values that are not contained in given list."
  price_not_in: [Float!]
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  title: String
  "All values containing the given string."
  title_contains: String
  "All values ending with the given string."
  title_ends_with: String
  "All values greater than the given value."
  title_gt: String
  "All values greater than or equal the given value."
  title_gte: String
  "All values that are contained in given list."
  title_in: [String!]
  "All values less than the given value."
  title_lt: String
  "All values less than or equal the given value."
  title_lte: String
  "All values that are not equal to given value."
  title_not: String
  "All values not containing the given string."
  title_not_contains: String
  "All values not ending with the given string."
  title_not_ends_with: String
  "All values that are not contained in given list."
  title_not_in: [String!]
  "All values not starting with the given string."
  title_not_starts_with: String
  "All values starting with the given string."
  title_starts_with: String
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
}

input ProductWhereUniqueInput {
  id: ID
  inventoryID: String
  title: String
}

input ThemeCreateInput {
  customer: CustomerCreateOneWithoutThemeInput
  logo: AssetCreateOneWithoutLogoThemeInput
  primaryColor: String!
  status: Status
}

input ThemeCreateManyWithoutLogoInput {
  connect: [ThemeWhereUniqueInput!]
  create: [ThemeCreateWithoutLogoInput!]
}

input ThemeCreateOneWithoutCustomerInput {
  connect: ThemeWhereUniqueInput
  create: ThemeCreateWithoutCustomerInput
}

input ThemeCreateWithoutCustomerInput {
  logo: AssetCreateOneWithoutLogoThemeInput
  primaryColor: String!
  status: Status
}

input ThemeCreateWithoutLogoInput {
  customer: CustomerCreateOneWithoutThemeInput
  primaryColor: String!
  status: Status
}

input ThemeScalarWhereInput {
  "Logical AND on all given filters."
  AND: [ThemeScalarWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [ThemeScalarWhereInput!]
  "Logical OR on all given filters."
  OR: [ThemeScalarWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  primaryColor: String
  "All values containing the given string."
  primaryColor_contains: String
  "All values ending with the given string."
  primaryColor_ends_with: String
  "All values greater than the given value."
  primaryColor_gt: String
  "All values greater than or equal the given value."
  primaryColor_gte: String
  "All values that are contained in given list."
  primaryColor_in: [String!]
  "All values less than the given value."
  primaryColor_lt: String
  "All values less than or equal the given value."
  primaryColor_lte: String
  "All values that are not equal to given value."
  primaryColor_not: String
  "All values not containing the given string."
  primaryColor_not_contains: String
  "All values not ending with the given string."
  primaryColor_not_ends_with: String
  "All values that are not contained in given list."
  primaryColor_not_in: [String!]
  "All values not starting with the given string."
  primaryColor_not_starts_with: String
  "All values starting with the given string."
  primaryColor_starts_with: String
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
}

input ThemeSubscriptionWhereInput {
  "Logical AND on all given filters."
  AND: [ThemeSubscriptionWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [ThemeSubscriptionWhereInput!]
  "Logical OR on all given filters."
  OR: [ThemeSubscriptionWhereInput!]
  "The subscription event gets dispatched when it's listed in mutation_in"
  mutation_in: [MutationType!]
  node: ThemeWhereInput
  "The subscription event gets only dispatched when one of the updated fields names is included in this list"
  updatedFields_contains: String
  "The subscription event gets only dispatched when all of the field names included in this list have been updated"
  updatedFields_contains_every: [String!]
  "The subscription event gets only dispatched when some of the field names included in this list have been updated"
  updatedFields_contains_some: [String!]
}

input ThemeUpdateInput {
  customer: CustomerUpdateOneWithoutThemeInput
  logo: AssetUpdateOneWithoutLogoThemeInput
  primaryColor: String
  status: Status
}

input ThemeUpdateManyDataInput {
  primaryColor: String
  status: Status
}

input ThemeUpdateManyMutationInput {
  primaryColor: String
  status: Status
}

input ThemeUpdateManyWithWhereNestedInput {
  data: ThemeUpdateManyDataInput!
  where: ThemeScalarWhereInput!
}

input ThemeUpdateManyWithoutLogoInput {
  connect: [ThemeWhereUniqueInput!]
  create: [ThemeCreateWithoutLogoInput!]
  delete: [ThemeWhereUniqueInput!]
  deleteMany: [ThemeScalarWhereInput!]
  disconnect: [ThemeWhereUniqueInput!]
  set: [ThemeWhereUniqueInput!]
  update: [ThemeUpdateWithWhereUniqueWithoutLogoInput!]
  updateMany: [ThemeUpdateManyWithWhereNestedInput!]
  upsert: [ThemeUpsertWithWhereUniqueWithoutLogoInput!]
}

input ThemeUpdateOneWithoutCustomerInput {
  connect: ThemeWhereUniqueInput
  create: ThemeCreateWithoutCustomerInput
  delete: Boolean
  disconnect: Boolean
  update: ThemeUpdateWithoutCustomerDataInput
  upsert: ThemeUpsertWithoutCustomerInput
}

input ThemeUpdateWithWhereUniqueWithoutLogoInput {
  data: ThemeUpdateWithoutLogoDataInput!
  where: ThemeWhereUniqueInput!
}

input ThemeUpdateWithoutCustomerDataInput {
  logo: AssetUpdateOneWithoutLogoThemeInput
  primaryColor: String
  status: Status
}

input ThemeUpdateWithoutLogoDataInput {
  customer: CustomerUpdateOneWithoutThemeInput
  primaryColor: String
  status: Status
}

input ThemeUpsertWithWhereUniqueWithoutLogoInput {
  create: ThemeCreateWithoutLogoInput!
  update: ThemeUpdateWithoutLogoDataInput!
  where: ThemeWhereUniqueInput!
}

input ThemeUpsertWithoutCustomerInput {
  create: ThemeCreateWithoutCustomerInput!
  update: ThemeUpdateWithoutCustomerDataInput!
}

input ThemeWhereInput {
  "Logical AND on all given filters."
  AND: [ThemeWhereInput!]
  "Logical NOT on all given filters combined by AND."
  NOT: [ThemeWhereInput!]
  "Logical OR on all given filters."
  OR: [ThemeWhereInput!]
  _search: String
  createdAt: DateTime
  "All values greater than the given value."
  createdAt_gt: DateTime
  "All values greater than or equal the given value."
  createdAt_gte: DateTime
  "All values that are contained in given list."
  createdAt_in: [DateTime!]
  "All values less than the given value."
  createdAt_lt: DateTime
  "All values less than or equal the given value."
  createdAt_lte: DateTime
  "All values that are not equal to given value."
  createdAt_not: DateTime
  "All values that are not contained in given list."
  createdAt_not_in: [DateTime!]
  customer: CustomerWhereInput
  id: ID
  "All values containing the given string."
  id_contains: ID
  "All values ending with the given string."
  id_ends_with: ID
  "All values greater than the given value."
  id_gt: ID
  "All values greater than or equal the given value."
  id_gte: ID
  "All values that are contained in given list."
  id_in: [ID!]
  "All values less than the given value."
  id_lt: ID
  "All values less than or equal the given value."
  id_lte: ID
  "All values that are not equal to given value."
  id_not: ID
  "All values not containing the given string."
  id_not_contains: ID
  "All values not ending with the given string."
  id_not_ends_with: ID
  "All values that are not contained in given list."
  id_not_in: [ID!]
  "All values not starting with the given string."
  id_not_starts_with: ID
  "All values starting with the given string."
  id_starts_with: ID
  logo: AssetWhereInput
  primaryColor: String
  "All values containing the given string."
  primaryColor_contains: String
  "All values ending with the given string."
  primaryColor_ends_with: String
  "All values greater than the given value."
  primaryColor_gt: String
  "All values greater than or equal the given value."
  primaryColor_gte: String
  "All values that are contained in given list."
  primaryColor_in: [String!]
  "All values less than the given value."
  primaryColor_lt: String
  "All values less than or equal the given value."
  primaryColor_lte: String
  "All values that are not equal to given value."
  primaryColor_not: String
  "All values not containing the given string."
  primaryColor_not_contains: String
  "All values not ending with the given string."
  primaryColor_not_ends_with: String
  "All values that are not contained in given list."
  primaryColor_not_in: [String!]
  "All values not starting with the given string."
  primaryColor_not_starts_with: String
  "All values starting with the given string."
  primaryColor_starts_with: String
  status: Status
  "All values that are contained in given list."
  status_in: [Status!]
  "All values that are not equal to given value."
  status_not: Status
  "All values that are not contained in given list."
  status_not_in: [Status!]
  updatedAt: DateTime
  "All values greater than the given value."
  updatedAt_gt: DateTime
  "All values greater than or equal the given value."
  updatedAt_gte: DateTime
  "All values that are contained in given list."
  updatedAt_in: [DateTime!]
  "All values less than the given value."
  updatedAt_lt: DateTime
  "All values less than or equal the given value."
  updatedAt_lte: DateTime
  "All values that are not equal to given value."
  updatedAt_not: DateTime
  "All values that are not contained in given list."
  updatedAt_not_in: [DateTime!]
}

input ThemeWhereUniqueInput {
  id: ID
}


scalar DateTime

"Custom scalar representing a Slate rich text AST"
scalar RichTextAST

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"Raw JSON value"
scalar Json
